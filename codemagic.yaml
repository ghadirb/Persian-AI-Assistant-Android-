workflows:
  minimal-build:
    name: Minimal Persian AI Assistant Build
    max_build_duration: 20
    instance_type: mac_mini_m1
    environment:
      java: 17
    scripts:
      - name: Minimal build
        script: |
          echo "=== Minimal Build for Persian AI Assistant ==="
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          chmod +x ./gradlew
          ./gradlew clean --no-daemon
          ./gradlew assembleDebug --no-daemon
          
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            cp app/build/outputs/apk/debug/app-debug.apk persian-ai-minimal.apk
            echo "SUCCESS: APK created"
            ls -lh persian-ai-minimal.apk
          else
            echo "ERROR: APK not found"
            find . -name "*.apk" -type f
            exit 1
          fi
    artifacts:
      - "persian-ai-minimal.apk"
    publishing:
      email:
        recipients:
          - ghadir.baraty@gmail.com
        notify:
          success: true
          failure: true
  debug-only:
    name: Persian AI Assistant - Debug APK Only
    max_build_duration: 25
    instance_type: mac_mini_m1
    environment:
      java: 17
      vars:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Xmx4g"
    scripts:
      - name: Setup environment
        script: |
          echo "=== Setting up build environment ==="
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          echo "Android SDK: $ANDROID_SDK_ROOT"
          
      - name: Build debug APK
        script: |
          echo "=== Building Persian AI Assistant Debug APK ==="
          chmod +x ./gradlew
          
          echo "Gradle version:"
          ./gradlew --version
          
          echo "=== Cleaning project ==="
          ./gradlew clean --no-daemon --stacktrace
          
          echo "=== Building debug APK ==="
          ./gradlew assembleDebug --no-daemon --stacktrace
          
          echo "=== Verifying APK creation ==="
          find . -name "*.apk" -type f -ls
          
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "✅ APK created successfully!"
            ls -lh app/build/outputs/apk/debug/app-debug.apk
            cp app/build/outputs/apk/debug/app-debug.apk persian-ai-assistant-debug.apk
          else
            echo "❌ APK not found in expected location"
            find . -name "*.apk" -type f
            exit 1
          fi
          
    artifacts:
      - "persian-ai-assistant-debug.apk"
      - "app/build/outputs/apk/debug/*.apk"
      
    publishing:
      email:
        recipients:
          - ghadir.baraty@gmail.com
        notify:
          success: true
          failure: true
  simple-apk:
    name: Simple APK Build
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      java: 17
      vars:
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    scripts:
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
      - name: Build Debug APK Only
        script: |
          echo "=== Persian AI Assistant Simple Build ==="
          chmod +x ./gradlew
          ./gradlew clean --no-daemon --stacktrace
          ./gradlew assembleDebug --no-daemon --stacktrace --info
          
          echo "=== Verifying APK creation ==="
          find . -name "*.apk" -type f
          
          echo "=== Copying APK files ==="
          mkdir -p artifacts
          find . -name "*debug*.apk" -type f -exec cp {} artifacts/ \;
          find . -name "*debug*.apk" -type f -exec cp {} . \;
          
          ls -la artifacts/ || echo "No artifacts directory"
          ls -la *.apk || echo "No APK in root"
    artifacts:
      - "*.apk"
      - "artifacts/*.apk"
      - "app/build/outputs/apk/debug/*.apk"
    
  android-workflow:
    name: Persian AI Assistant Android Build
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      # android_signing:
      #   - keystore_reference
      # groups:
      #   - google_play # فعلاً غیرفعال - نیاز به تنظیم Google Play Console
      vars:
        PACKAGE_NAME: "com.example.persianaiapp"
        GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      java: 17
      node: 18
    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.android/build-cache
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true
        - pattern: 'develop'
          include: true
          source: true
    scripts:
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
      
      - name: Get Flutter packages
        script: |
          # اگر از Flutter استفاده می‌کنید این بخش را فعال کنید
          # flutter packages pub get
          
      - name: Set up keystore
        script: |
          # Only set up keystore if CM_KEYSTORE is available
          if [ ! -z "$CM_KEYSTORE" ]; then
            echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
            export KEYSTORE_PATH="/tmp/keystore.keystore"
            echo "Keystore configured for signing"
          else
            echo "No keystore configured - building unsigned APK"
          fi
          
      - name: Generate debug keystore
        script: |
          # Generate debug keystore if it doesn't exist
          if [ ! -f "app/debug.keystore" ]; then
            echo "Generating debug keystore..."
            keytool -genkeypair -v \
              -keystore app/debug.keystore \
              -storepass android \
              -alias androiddebugkey \
              -keypass android \
              -dname "CN=Android Debug,O=Android,C=US" \
              -keyalg RSA \
              -keysize 2048 \
              -validity 10000
            echo "Debug keystore generated successfully"
          else
            echo "Debug keystore already exists"
          fi
          
      - name: Build and Verify APK Generation
        script: |
          echo "=== Starting Persian AI Assistant Build ==="
          echo "Java version: $(java -version 2>&1 | head -n 1)"
          
          # Make gradlew executable
          chmod +x ./gradlew
          echo "Made gradlew executable"
          
          echo "Gradle version: $(./gradlew --version | grep Gradle)"
          
          # Clean project
          echo "=== Cleaning project ==="
          ./gradlew clean --no-daemon --stacktrace
          
          # Build Debug APK
          echo "=== Building Debug APK ==="
          ./gradlew assembleDebug --no-daemon --stacktrace --info
          
          # Build Release APK if keystore available
          echo "=== Building Release APK (if keystore available) ==="
          if [ ! -z "$CM_KEYSTORE" ]; then
            ./gradlew assembleRelease --no-daemon --stacktrace --info
            ./gradlew bundleRelease --no-daemon --stacktrace --info
          else
            echo "No keystore - skipping release build"
          fi
          
          echo ""
          echo "=== Verifying build outputs ==="
          echo "Build directory contents:"
          ls -la app/build/ || echo "No build directory"
          
          echo "Searching for APK files:"
          APK_FILES=$(find . -name "*.apk" -type f 2>/dev/null)
          if [ -n "$APK_FILES" ]; then
            echo "Found APK files:"
            echo "$APK_FILES"
            echo "APK file sizes:"
            find . -name "*.apk" -type f -exec ls -lh {} \;
          else
            echo "❌ No APK files found anywhere!"
            echo "Checking gradle tasks..."
            ./gradlew tasks --all | grep -i apk || echo "No APK tasks found"
            exit 1
          fi
          
          # Create artifacts directory and copy files
          echo "=== Preparing artifacts ==="
          mkdir -p artifacts
          find . -name "*.apk" -type f -exec cp {} artifacts/ \;
          find . -name "*.aab" -type f -exec cp {} artifacts/ \;
          
          echo "Artifacts directory contents:"
          ls -la artifacts/
          
          echo "=== Build completed successfully ==="
          
    artifacts:
      - "*.apk"
      - "artifacts/*.apk"
      - "artifacts/*.aab"
      - "app/build/outputs/**/*.apk"
      - "app/build/outputs/**/*.aab"
      
    publishing:
      # فقط ارسال ایمیل با فایل APK
      email:
        recipients:
          - ghadir.baraty@gmail.com  # ایمیل اصلی شما
        notify:
          success: true
          failure: true
          
  # Workflow برای ساخت APK بدون امضا (برای تست)
  android-unsigned:
    name: Persian AI Assistant - Unsigned APK
    max_build_duration: 30
    instance_type: mac_mini_m1
    environment:
      java: 17
      node: 18
    cache:
      cache_paths:
        - ~/.gradle/caches
        - ~/.android/build-cache
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'develop'
          include: true
          source: true
    scripts:
      - name: Set up local.properties
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/local.properties"
          
      - name: Build unsigned APK
        script: |
          chmod +x ./gradle-build.sh
          ./gradle-build.sh
          
      - name: Rename APK
        script: |
          cd app/build/outputs/apk/debug
          mv app-debug.apk persian-ai-assistant-unsigned-$(date +%Y%m%d-%H%M%S).apk
          
    artifacts:
      - app/build/outputs/apk/debug/*.apk
      
    publishing:
      email:
        recipients:
          - ghadir.baraty@gmail.com
        notify:
          success: true
          failure: true
